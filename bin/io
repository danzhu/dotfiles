#!/usr/bin/env node

const child_process = require('child_process')
const events = require('events')
const process = require('process')
const util = require('util')

const execFile = util.promisify(child_process.execFile)

const main = async () => {
    if (process.argv.length <= 2) {
        process.stderr.write('usage: io prog [args ...]\n')
        return
    }

    // node io prog args...
    const [prog, ...args] = process.argv.slice(2)

    const TERMINFO = Object.fromEntries(await Promise.all(Object.entries({
        reset: ['sgr0'],
        bold: ['bold'],
        red: ['setaf', 1],
        green: ['setaf', 2],
        yellow: ['setaf', 3],
        blue: ['setaf', 4],
        magenta: ['setaf', 5],
        cyan: ['setaf', 6],
        white: ['setaf', 7],
    }).map(async ([name, args]) => {
        const { stdout } = await execFile('tput', args)
        return [name, stdout]
    })))
    const CLEAR = ''

    const COLOURS = {
        stdin: TERMINFO.white,
        stdout: CLEAR,
        stderr: TERMINFO.red,
    }

    let def_colour = CLEAR
    const pipe = {
        stdin: false,
        stdout: false,
        stderr: false,
    }

    if (!process.stdin.isTTY) {
        // not tty, need to echo
        pipe.stdin = true
    } else if (COLOURS.stdin !== CLEAR) {
        // tty and has colour, need to reset colour for every output
        def_colour = COLOURS.stdin
        pipe.stdout = true
        pipe.stderr = true
    } else {
        // tty and no colour, nothing to do
    }
    for (const s of ['stdout', 'stderr']) {
        if (COLOURS[s] !== CLEAR) {
            // need to colour stream
            pipe[s] = true
        }
    }

    let cur_colour = CLEAR
    const set_colour = colour => {
        if (cur_colour === colour)
            return
        cur_colour = colour
        process.stdout.write(TERMINFO.reset + colour)
    }
    const pipe_coloured = (input, colour) => input.on('data', data => {
        set_colour(colour)
        process.stdout.write(data)
        set_colour(def_colour)
    })

    const child = child_process.spawn(prog, args, {
        stdio: ['stdin', 'stdout', 'stderr'].map(
            s => pipe[s] ? 'pipe' : 'inherit'
        ),
    })

    set_colour(def_colour)

    if (pipe.stdin) {
        pipe_coloured(process.stdin, COLOURS.stdin)
        process.stdin.pipe(child.stdin)
    }
    for (const s of ['stdout', 'stderr']) {
        if (pipe[s])
            pipe_coloured(child[s], COLOURS[s])
    }

    const [code] = await events.once(child, 'close')
    set_colour(CLEAR)
    process.exitCode = code
}

main().catch(err => {
    process.stderr.write(err)
    process.exitCode = 2
})
