# global settings
colorscheme code

set-option global autowrap_column 80
set-option global scrolloff 5,5
set-option global startup_info_version 20190120
set-option global tabstop 4
set-option global autoinfo command|onkey|normal

set-option global ui_options \
    ncurses_assistant=none \
    ncurses_set_title=no \
    # ncurses_status_on_top=yes \

set-option global modelinefmt %sh{
    segs=(
        {LineNumbers}
        {{mode_info}}
        %val{cursor_line} : %val{cursor_char_column}

        {Information}
        %opt{filetype}{{context_info}}

        {PrimarySelection}
        %val{bufname}
    )
    echo "${segs[@]}"
}

add-highlighter global/ number-lines -relative -hlcursor -separator ' '
add-highlighter global/ show-matching
add-highlighter global/ wrap -word -indent
add-highlighter global/ line '%val{cursor_line}' default,black
add-highlighter global/ column '%opt{autowrap_column}' default,black
add-highlighter global/ regex '\b(TODO|FIXME|XXX|NOTE)\b' 0:default+b
# add-highlighter global/ dynregex '%reg{/}' 0:+u

map -docstring 'comment line' global normal '#' \
    ': comment-line<ret>'
# map global normal <backspace> ':reg slash<ret>'
map -docstring 'delete word backward' global insert <c-w> \
    '<a-;>:exec -draft bd<ret>'
map -docstring 'edit rc' global user R \
    ': edit "%val{config}/kakrc"<ret>'

# tab completion
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# non-special windows
hook global WinCreate '^[^*]+$' %{
    map window normal <ret> ':w<ret>'
}

# declare-option -hidden regex curword
# set-face global CurWord default,black
#
# hook global NormalIdle .* %{
#     evaluate-commands -draft %{
#         try %{
#             execute-keys <space><a-i>w <a-k>\A\w+\z<ret>
#             set-option buffer curword "\b\Q%val{selection}\E\b"
#         } catch %{
#             set-option buffer curword ''
#         }
#     }
# }
# add-highlighter global/ dynregex '%opt{curword}' 0:default,black

# commands
define-command ide %{
    rename-client main
    set-option global jumpclient main

    new rename-client tools
    set-option global toolsclient tools

    new rename-client docs
    set-option global docsclient docs
}

# lsp
evaluate-commands %sh{
    if which kak-lsp &> /dev/null; then
        kak-lsp --kakoune -s $kak_session
        echo lsp-enable
    fi
}

# plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload config %{}
plug "andreyorst/smarttab.kak" config %{
    set-option global softtabstop 4
    hook global BufCreate .* expandtab
}
# plug "alexherbo2/search-highlighter.kak" config %{
#     hook global WinCreate .* %{
#           search-highlighter-enable
#     }
# }
plug "alexherbo2/auto-pairs.kak" config %{
    hook global WinCreate .* %{
        auto-pairs-enable
    }
}
