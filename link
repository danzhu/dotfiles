#!/bin/bash

declare -A PACKAGES=(
    [".Xresources"]="xorg/Xresources"
    [".bash_profile"]="bash/bash_profile"
    [".bashrc"]="bash/bashrc"
    [".clang-format"]="clang/clang-format"
    [".clang-tidy"]="clang/clang-tidy"
    [".clang_complete"]="clang/clang_complete"
    [".config/git"]="git"
    [".config/i3"]="i3"
    [".config/i3status"]="i3status"
    [".config/nvim"]="vim"
    [".config/termite"]="termite"
    [".config/zathura"]="zathura"
    [".emacs.d"]="emacs"
    [".flake8"]="python/flake8"
    [".inputrc"]="readline/inputrc"
    [".npmrc"]="node/npmrc"
    [".pylintrc"]="python/pylintrc"
    [".ssh"]="ssh"
    [".tern-config"]="node/tern-config"
    [".tmux"]="tmux"
    [".tmux.conf"]="tmux/tmux.conf"
    [".vim"]="vim"
    [".vimrc"]="vim/init.vim"
    [".xinitrc"]="xorg/xinitrc"
    [".xprofile"]="xorg/xprofile"
    [".zprofile"]="zsh/zprofile"
    [".zshenv"]="zsh/zshenv"
    [".zshrc"]="zsh/zshrc"
)

msg() {
    tput bold
    tput setaf $1
    echo -en "$2"
    tput sgr0
}

link() {
    local src="$HOME/$1"
    local tar="$PWD/$2"

    printf "%-20s" "$1"

    if [[ ! -e "$tar" ]]; then
        msg 1 " symlink target $tar not found\n"
        exit 2
    fi

    if [[ -L "$src" ]]; then
        # source is symlink
        local sym="$(readlink "$src")"

        if [[ "$tar" = "$sym" ]]; then
            msg 8 " already linked\n"

            return 0
        elif [[ $FORCE != true ]]; then
            msg 3 " linked to $sym\n"

            return 1
        else
            msg 4 " forced symlink override"
        fi
    elif [[ -e "$src" ]]; then
        # source exists and not symlink
        if [[ $FORCE != true ]]; then
            msg 3 " file exists\n"

            return 1
        else
            msg 4 " forced file override"
        fi
    fi

    if [[ $DRY = true ]]; then
        msg 2 " will be"
    else
        mkdir -p "$(dirname "$src")"
        if [[ $FORCE = true ]]; then
            ln -sf "$tar" "$src"
        else
            ln -s "$tar" "$src"
        fi

        msg 2 " successfully"
    fi

    msg 2 " linked\n"
}

usage() {
    echo "Usage: $0 [OPTION]... package"
    echo
    echo "  -h, --help      display this help and exit"
    echo "  -d, --dry       print actions but do not execute them"
    echo "  -f, --force     override existing files"
}

OPTIONS=hdf
LONG_OPTIONS=help,dry,force

OPT=$(getopt --options=$OPTIONS \
             --longoptions=$LONG_OPTIONS \
             --name "$0" \
             -- "$@")
if [[ $? -ne 0 ]]; then
    exit 2
fi

eval set -- "$OPT"

while true; do
    arg="$1"
    shift

    case "$arg" in
        -h|--help)
            usage
            exit
            ;;
        -d|--dry)
            DRY=true
            ;;
        -f|--force)
            FORCE=true
            ;;
        --)
            break
            ;;
        *)
            echo "oops"
            exit 3
            ;;
    esac
done

if [[ $# -ne 1 ]]; then
    usage
    exit 2
fi

package="$1"

for src in "${!PACKAGES[@]}"; do
    tar="${PACKAGES[$src]}"
    pkg="${tar%%/*}"

    if [[ "$package" != "all" && "$package" != "$pkg" ]]; then
        # this is not the package you are looking for
        continue
    fi

    found=true

    link "$src" "$tar"

    if [[ $? -ne 0 ]]; then
        fail=true
    fi
done

if [[ $fail = true ]]; then
    exit 1
elif [[ $found != true ]]; then
    msg 1 "error: "
    echo "package '$package' not found"
    exit 2
fi
